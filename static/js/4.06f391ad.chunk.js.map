{"version":3,"sources":["components/Projects/WeatherApp/index.js","components/Projects/WeatherApp/cityInput.js","components/Projects/WeatherApp/weatherCard.js"],"names":["Weather","props","_useState","useState","_useState2","Object","D_Projects_React_Myportfolio_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","city","setCity","_useState3","_useState4","error","setError","_useState5","_useState6","currentWeather","setCurrentWeather","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","_cityInput__WEBPACK_IMPORTED_MODULE_5__","onChangeCity","getWeather","e","preventDefault","axios","get","concat","then","res","response","statusText","data","Error","handleResponse","weather","entries","length","mappedData","mapped","name","country","sys","date","moment","dt","format","iconUrl","icon","humidity","main","temperature","temp","description","wind_speed","Math","round","wind","speed","mapDataToWeatherInterface","catch","err","console","message","_weatherCard__WEBPACK_IMPORTED_MODULE_6__","cityInput","value","setValue","useEffect","Fragment","react_autocomplete__WEBPACK_IMPORTED_MODULE_2___default","style","marginBottom","getItemValue","item","items","label","renderItem","isHighlighted","background","onChange","target","log","onSelect","val","onClick","__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","weatherCard","_ref","styles","marginTop","id","src","alt"],"mappings":"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","file":"static/js/4.06f391ad.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './weather.css';\r\nimport './index.css';\r\n\r\nimport CityInput from './cityInput';\r\nimport WeatherCard from './weatherCard';\r\nimport moment from 'moment';\r\n\r\n/**\r\n * Funtion to map the response object to a Map\r\n * @param {*} data \r\n */\r\nconst mapDataToWeatherInterface = data => {\r\n    const mapped = {\r\n        city: data.name,\r\n        country: data.sys.country,\r\n        date: moment(data.dt * 1000).format('dddd, HH:mm'),\r\n        iconUrl: `http://openweathermap.org/img/w/${data.weather[0].icon}.png`,\r\n        humidity: data.main.humidity,\r\n        temperature: data.main.temp,\r\n        description: data.weather[0].description,\r\n        wind_speed: Math.round(data.wind.speed * 3.6) // convert from m/s to km/h\r\n    };\r\n\r\n    if (data.weather[0].icon) {\r\n        mapped.icon = data.weather[0].icon;\r\n    }\r\n\r\n    return mapped;\r\n}\r\n/**\r\n * Callback triggerd on recieving a response\r\n * Check the Status of the response and handle accordingly\r\n * @param {*Object} response \r\n * @param {*Object} response.data\r\n */\r\nconst handleResponse = response => {\r\n    if (response.statusText === 'OK') {\r\n        return response.data;\r\n    } else {\r\n        throw new Error(\"Error: Location \" + response.statusText);\r\n    }\r\n}\r\n/**\r\n * Weather Component\r\n * @param {*Object} props \r\n */\r\nconst Weather = props => {\r\n    const [city, setCity] = useState(\"Eldoret\");\r\n    const [error, setError] = useState(null);\r\n    const [currentWeather, setCurrentWeather] = useState({});\r\n    /**\r\n     * Callback triggered when the value changes in the autocomplete field\r\n     * \r\n     * @param {Event} e JavaScript Event\r\n     */\r\n    const handleCityChange = city => {\r\n        setCity(city);\r\n    };\r\n    /**\r\n     * Callback triggered to search the weather of the city chosen\r\n     * \r\n     * @param {Event} e JavaScript Event\r\n     */\r\n    const getWeather = (e) => {\r\n        e.preventDefault();\r\n        axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=998e91a933ce60e317d2770555b8b051`)\r\n            .then(res => handleResponse(res))\r\n            .then(weather => {\r\n                if (Object.entries(weather).length) {\r\n                    const mappedData = mapDataToWeatherInterface(weather);\r\n                    setCurrentWeather(mappedData);\r\n                }\r\n            }).catch(err => {\r\n                console.error(`Error fetching current weather for ${city}: `, error);\r\n                setError(err.message);\r\n            });;\r\n    }\r\n    return (\r\n        <div className='container weather-board'>\r\n            <div className='header'>\r\n                Weather ForeCast\r\n            </div>\r\n            <div className='search'>\r\n\r\n                <CityInput onChangeCity={handleCityChange} getWeather={getWeather} />\r\n            </div>\r\n            {Object.entries(currentWeather).length ? < WeatherCard currentWeather={currentWeather} /> : null}\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Weather;","import React, { useEffect, useState } from 'react';\r\nimport Autocomplete from 'react-autocomplete';\r\nimport './cityInput.css';\r\n\r\nconst cityInput = props => {\r\n    const [value, setValue] = useState('');\r\n    const { onChangeCity } = props;\r\n    useEffect(() => {\r\n        onChangeCity(value);\r\n    }, [value]);\r\n    /**\r\n     * Initial values in the autocomplete\r\n     */\r\n    const autocompleteData = [\r\n        {\r\n            label: 'New York',\r\n            value: 'New York'\r\n        },\r\n        {\r\n            label: 'Los Angeles',\r\n            value: 'Los Angeles'\r\n        },\r\n        {\r\n            label: 'Chicago',\r\n            value: 'Chicago'\r\n        }\r\n    ];\r\n\r\n    /**\r\n     * Callback triggered when the user types in the autocomplete field\r\n     * \r\n     * @param {Event} e JavaScript Event\r\n     * @return {Event} Event of JavaScript can be used as usual.\r\n     */\r\n    const onChange = (e) => {\r\n        setValue(e.target.value);\r\n        console.log(\"The Input Text has changed to \", e.target.value);\r\n    }\r\n\r\n    /**\r\n     * Callback triggered when the autocomplete input changes.\r\n     * \r\n     * @param {Object} val Value returned by the getItemValue function.\r\n     * @return {Nothing} No value is returned\r\n     */\r\n    const onSelect = (val) => {\r\n        setValue(val);\r\n        console.log(\"Option from 'database' selected : \", val);\r\n    }\r\n\r\n    /**\r\n     * Define the markup of every rendered item of the autocomplete.\r\n     * \r\n     * @param {Object} item Single object from the data that can be shown inside the autocomplete\r\n     * @param {Boolean} isHighlighted declares wheter the item has been highlighted or not.\r\n     * @return {Markup} Component\r\n     */\r\n    const renderItem = (item, isHighlighted) => {\r\n        return (\r\n            <div style={{ background: isHighlighted ? 'lightgray' : 'white' }}>\r\n                {item.label}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Define which property of the autocomplete source will be show to the user.\r\n     * \r\n     * @param {Object} item Single object from the data that can be shown inside the autocomplete\r\n     * @return {String} val\r\n     */\r\n    const getItemValue = (item) => {\r\n        return `${item.value}`;\r\n    }\r\n\r\n    return (\r\n        // <div className=\"container\">\r\n        // <div className=\"row input-city\" style={{marginBottom: '100px', zIndex: '9'}}>\r\n        <>\r\n        <div className=\"text-secondary autocomplete\">\r\n            <Autocomplete\r\n                style={{ marginBottom: \"40px\" }}\r\n                getItemValue={getItemValue}\r\n                items={autocompleteData}\r\n                renderItem={renderItem}\r\n                value={value}\r\n                onChange={onChange}\r\n                onSelect={onSelect}\r\n            />\r\n            </div>\r\n      \r\n            <button onClick={props.getWeather}>get</button>\r\n            </>\r\n        // </div>\r\n        // </div>\r\n    );\r\n\r\n}\r\n\r\nexport default cityInput;\r\n","import React from 'react';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport './index.css';\r\n\r\nconst weatherCard = ({ currentWeather }) => {\r\n    const {\r\n        city,\r\n        country,\r\n        date,\r\n        iconUrl,\r\n        humidity,\r\n        temperature,\r\n        description,\r\n        wind_speed\r\n    } = currentWeather;\r\n    return (\r\n        <div className=\"weather card weather-card text-dark\" styles={{ marginTop: '40px' }}>\r\n            <div className=\"card-body pb-3\">\r\n                <h4 className=\"card-title font-weight-bold \">{city}, {country}</h4>\r\n                <p className=\"card-text\">{date}, {description}</p>\r\n                <div className=\"d-flex justify-content-between\">\r\n                    <p className=\"display-2\">{Math.round(temperature - 273.15)}°C</p>\r\n                    <div id=\"icon\" ><img id=\"wicon\" src={iconUrl} alt=\"Weather icon\"/></div>\r\n                    {/* <i className=\"fas fa-sun-o pt-3 amber-text\"></i> */}\r\n                </div>\r\n                <div className=\"d-flex justify-content-between mb-4\">\r\n                    <p><i className=\"fas fa-tint fa-lg text-info pr-2\"></i>{humidity}% Humidity</p>\r\n                    <p><i className=\"fas fa-wind fa-lg text-info pr-2\"></i>{wind_speed}</p>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default weatherCard;"],"sourceRoot":""}